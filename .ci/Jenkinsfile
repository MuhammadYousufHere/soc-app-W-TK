def isThisTagUpdate() {

    // Get the variable from env variable
    def inputBranchName = "${env.GIT_BRANCH}"
    echo inputBranchName

    // Tokenize the input
    def (remoteName, tags, tagName) = inputBranchName.tokenize( '/' )

    // Get the Tag name
    echo remoteName
    echo tags

    return tags == 'tags'
}

pipeline  {
    environment   {

        // these should be parameters to the job
        // the default value can be set using parameters
        AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID}"
        AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}"
        IMAGE_REPO_NAME="${IMAGE_REPO_NAME}"
        registryCredential="${registryCredential}"

        // Envs for Build
        NODE_ENV="${NODE_ENV}"
        API_URL="${API_URL}"
        // Build the registry
        registry = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"

        // Docker image used for pushing
        dockerImage = ''

        // Conditonal Dynamic variables
        //BranchName = getBranchName()
        //TagName    = getTagName()
        IsThisTagUpdate = isThisTagUpdate()

        // Get Current Datetime
        currentDate = sh(returnStdout: true, script: 'date --utc +%Y-%m-%d-%H-%M-%S').trim()
    }

    /*
     * Useful reference links:
     * https://stackoverflow.com/questions/44330148/run-bash-command-on-jenkins-pipeline
     * https://stackoverflow.com/questions/48762111/how-to-detect-jenkins-multibranch-branch-or-tag
     */

    // Build on any stage
    agent any

    // stages
    stages {
         stage("Cleanup Workspace") {
          steps {
             echo "We are printing images"
             sh "docker images"
             sh "docker system prune -af"
            }
         }
        // stage("Lint Check") {
        //      steps {
        //          sh 'npm run lint:check'
        //    }
        // }
        // stage("Code Format Check") {
        // steps {
        //          sh 'npm run prettier:check'
        //     }
        // }
        stage('Build Image') {
            steps{

                // Groovy or shell code must go inside script tags
                script {

                    // Build a dockerfile based on args and define them in variable for Production
                    def buildOptions = """\
                        --build-arg APP_BUILD_VERSION="Latest Version" \
                        --build-arg APP_BUILD_TIME=${env.currentDate}\
                        -f Dockerfile \
                        . --rm"""                  

                    // Echo some sanity value
                    echo "is this is a tag build: ${env.IsThisTagUpdate}"

                    // define a variable
                    def isThisTagBuild = "${env.IsThisTagUpdate}"
                    echo isThisTagBuild

                    if ( isThisTagBuild == "true" ){
                        echo "We are building a Tag Build"

                        // Get the tag name
                        def inputBranchName = "${env.GIT_BRANCH}"
                        echo inputBranchName

                        // Tokenize the input
                        def (remoteName, tags, tagName) = inputBranchName.tokenize( '/' )
                        echo tagName

                        //Build a dockerfile based on args and define them in variable for Production
                        buildOptions = """\
                         --build-arg APP_BUILD_VERSION=$tagName \
                         --build-arg APP_BUILD_TIME="${env.currentDate}"\
                         -f Dockerfile \
                         ."""                                               
                   
                        // Print out the Tag Build
                        echo "Build Date ${env.currentDate} "
                        echo "Build Version $tagName "

                        // make the image using base tag name
                        dockerImage = docker.build(registry + ":$JOB_BASE_NAME" + "_$tagName", buildOptions)
                    }
                    else{
                        echo "We are building a non tag build"
                          //Build a dockerfile based on args and define them in variable for development
                        //added build time and build version using latest version.
                        def buildArgs = """\
                         --build-arg AUTH_SERVICE_URL=${env.AUTH_SERVICE_URL} \
                         --build-arg USER_SERVICE_URL=${env.USER_SERVICE_URL} \
                         -f Dockerfile \
                         ."""


                        // Print out the Tag Build
                        echo "Build Date ${env.currentDate}"
                        echo "Build Version Latest Version"  

                        // make the image using base job name
                        dockerImage = docker.build(registry + ":$JOB_BASE_NAME", buildOptions)
                    }
                }
            }
        }

        // Stage to publish to ECR
        stage('Publish to ECR') {
            steps{

                // Groovy or shell code must go inside script tags
                script {
                    docker.withRegistry("https://" + registry, "ecr:us-east-1:" + registryCredential) {
                    dockerImage.push()
                    }
                }
            }
        }
       
    }
}